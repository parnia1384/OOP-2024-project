import java.util.ArrayList;
import java.util.Collections;
import java.util.Scanner;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
public class MainMenu {
    private ArrayList<Damage_Heal> shopCards = new ArrayList<>();
    private ArrayList<Spell> shopSpells = new ArrayList<>();
    public ArrayList<Damage_Heal> getShopCards(){return shopCards;}
    final private ProfileMenu profileMenu = new ProfileMenu();
    public void addDamage_Heal(Damage_Heal card){
        shopCards.add(card);
    }
    public Damage_Heal getCardByName(String name){
        for(Damage_Heal card : shopCards)
            if (card.getName().equals(name))
                return card;
        return null;
    }
    public Spell getSpellByName(String name){
        for(Spell card : shopSpells)
            if (card.getName().equals(name))
                return card;
        return null;
    }
    public void addSpell(){
        Spell peeves=new Spell("PEEVES", 153);
        Spell sectumsempra=new Spell("SECTUMSEMPRA", 417);
        Spell cornishPixie=new Spell("CORNISH PIXIE", 186);
        Spell hedwig=new Spell("HEDWIG", 384);
        Spell madamPomfrey=new Spell("MADAM POMFREY", 285);
        Spell merpeople=new Spell("MERPEOPLE", 318);
        Spell whompingWillow=new Spell("WHOMPING WILLOW", 252);
        Spell goblin=new Spell("GOBLIN", 351);
        Spell patronus=new Spell("PATRONUS", 450);
        Spell fluffy=new Spell("FLUFFY", 219);
        Collections.addAll(shopSpells,peeves,sectumsempra,cornishPixie,hedwig,madamPomfrey,merpeople,whompingWillow,goblin,patronus,fluffy);
    }
    private Matcher getCommandMatcher(String input, String regex){
        Pattern pattern=Pattern.compile(regex);
        return pattern.matcher(input);
    }
    public void showShopCards(){
        int num=0;
        for(Damage_Heal card :shopCards)
            System.out.println(++num+". name: "+card.getName()+" defence_attack: "+card.getDefence_attack()+" duration: "+card.getDuration()+" damage: "+card.getDamage()+" upgradeLeve: "+card.getUpgradeLevel()+" upgradeCost: "+card.getUpgradeCost()+" price: "+card.getPrice());
    }
    public void showCardsNotInDeck(User user){
        int num=0;
        System.out.println("Damage/Heal Cards:");
        for(Damage_Heal card : shopCards)
            if(user.getCardFromDeckByName(card.getName())==null)
                System.out.println(++num+". name: "+card.getName()+" defence_attack: "+card.getDefence_attack()+" duration: "+card.getDuration()+" damage: "+card.getDamage()+" upgradeLeve: "+card.getUpgradeLevel()+" upgradeCost: "+card.getUpgradeCost()+" price: "+card.getPrice());
        System.out.println("Spell Cards:");
        for(Spell card: shopSpells)
            if(user.getCardFromDeckByName(card.getName())==null)
                System.out.println(++num+". name: "+card.getName()+" price: "+card.getPrice());
    }
    public void run(Scanner scanner, User user, RegistryMenu registryMenu, Outputs outputs) {
        while(true){
            String input = scanner.nextLine();
            if(input.equals("back"))
                break;
            if (input.equals("start game")) {
                Game game=new Game(user,scanner,registryMenu,outputs);
                game.run(shopCards,shopSpells, scanner, registryMenu);
            }
            else if (input.equals("show deck")) {
                user.showDeck();
            }
            else if (input.equals("show history")) {
                for(String games : registryMenu.getGamesHistory())
                    System.out.println(games);
            }
            else if (input.equals("shop menu")) {
                System.out.println("entered shop menu");
                showCardsNotInDeck(user);
                while (true) {
                    String command = scanner.nextLine();
                    if (command.equals("back")){
                        System.out.println("Returned to main menu");
                        break;
                    }
                    String buyCard = "^buy card ([A-Z ]+)$";
                    String upgradeCard = "^upgrade card ([A-Z ]+)$";
                    Matcher buy = getCommandMatcher(command, buyCard);
                    Matcher upgrade = getCommandMatcher(command, upgradeCard);
                    if (!buy.matches() && !upgrade.matches()) System.out.println("invalid command!");
                    else if (buy.matches()) {
                        String name = buy.group(1);
                        if (getCardByName(name) != null) {
                            if (user.getCoin() < getCardByName(name).getPrice())
                                System.out.println("not enough money!");
                            else{
                                user.addToDeck(getCardByName(name));
                                int coin = user.getCoin();
                                coin -= getCardByName(name).getPrice();
                                user.setCoin(coin);
                                System.out.println("The card has been added to your table.");
                            }
                        }
                        else if (getSpellByName(name) != null) {
                            if (user.getCoin() < getSpellByName(name).getPrice())
                                System.out.println("not enough money!");
                            else{
                                user.addToDeck(getSpellByName(name));
                                int coin = user.getCoin();
                                coin -= getSpellByName(name).getPrice();
                                user.setCoin(coin);
                            }
                        }
                        else System.out.println("card doens't exist!");
                    }
                    else if (upgrade.matches()) {
                        String name = upgrade.group(1);
                        user.upgradeCard(name);
                    }
                }
            }
            else if (input.equals("Profile menu")) {
                System.out.println("Entered profile menu successfully.");
                profileMenu.myProfile(scanner, user);
            }
            else if(input.equals("Return to signup menu")){
                System.out.println("Returned to signup menu successfully!");
                break;
            }
        }
    }
}
